require("dotenv").config();
import express from "express";
import { Groq } from "groq-sdk";
import cors from "cors";
import { BASE_PROMPT, getSystemPrompt } from "./prompts";
import { basePrompt as nodeBasePrompt } from "./defaults/node";
import { basePrompt as reactBasePrompt } from "./defaults/react";

const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY,
});

const app = express();
app.use(cors());
app.use(express.json());

app.post("/template", async (req, res) => {
  const userPrompt = req.body.prompt;

  const systemInstruction =
    "Return either node or react based on what you think this project should be. Only return a single word: either 'node' or 'react'. Do not return anything extra.";

  const completion = await groq.chat.completions.create({
    messages: [
      { role: "system", content: systemInstruction },
      { role: "user", content: userPrompt },
    ],
    model: "llama3-8b-8192",
    temperature: 1,
    max_tokens: 8000,
  });

  const answer = completion.choices[0]?.message?.content?.trim().toLowerCase();

  if (answer === "react") {
    return res.json({
      prompts: [
        BASE_PROMPT,
        `Here is an artifact that contains all files of the project visible to you.\nConsider the contents of ALL files in the project.\n\n${reactBasePrompt}\n\nHere is a list of files that exist on the file system but are not being shown to you:\n\n  - .gitignore\n  - package-lock.json\n`,
      ],
      uiPrompts: [reactBasePrompt],
    });
  }

  if (answer === "node") {
    return res.json({
      prompts: [
        `Here is an artifact that contains all files of the project visible to you.\nConsider the contents of ALL files in the project.\n\n${nodeBasePrompt}\n\nHere is a list of files that exist on the file system but are not being shown to you:\n\n  - .gitignore\n  - package-lock.json\n`,
      ],
      uiPrompts: [nodeBasePrompt],
    });
  }

  return res.status(403).json({ message: "Unable to determine project type" });
});

app.post("/chat", async (req, res) => {
  const messages = req.body.messages;

  const chatCompletion = await groq.chat.completions.create({
    messages: [
      { role: "system", content: getSystemPrompt() },
      ...messages,
    ],
    model: "llama3-8b-8192",
    temperature: 1,
    max_tokens: 8000,
    top_p: 1,
  });

  const responseText = chatCompletion.choices[0]?.message?.content || "";

  res.json({
    response: responseText,
  });
});

app.listen(3000, () => {
  console.log("⚡ Server is running on http://localhost:3000");
});


--------------------------------------------------------------------------

import dotenv from "dotenv";
dotenv.config();

import express, { Request, Response } from "express";
import cors from "cors";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { BASE_PROMPT, getSystemPrompt } from "./prompts";
import { basePrompt as nodeBasePrompt } from "./defaults/node";
import { basePrompt as reactBasePrompt } from "./defaults/react";

const app = express();
app.use(cors());
app.use(express.json());

// Check for API key
if (!process.env.GEMINI_API_KEY) {
  throw new Error("❌ GEMINI_API_KEY is missing in .env");
}

// Initialize Gemini model
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY as string);
const model = genAI.getGenerativeModel({ model: "models/gemini-1.5-flash" });

// ==========
// Gemini Call
// ==========
async function getGeminiResponse(promptMessages: any[]) {
  try {
    const result = await model.generateContent({
      contents: promptMessages,
      generationConfig: {
        temperature: 1,
        maxOutputTokens: 8000,
      },
    });

    return result.response.text();
  } catch (err) {
    console.error("❌ Gemini generation error:", err);
    throw err;
  }
}

// ======================
// POST /template → Get Prompt Templates
// ======================
app.post("/template", async (req: Request, res: Response) => {
  const userPrompt = req.body.prompt;

  if (!userPrompt) {
    return res.status(400).json({ message: "Missing prompt in request body" });
  }

  const systemInstruction =
    "Return either node or react based on what you think this project should be. Only return a single word: either 'node' or 'react'. Do not return anything extra.";

  try {
    const geminiResponse = await getGeminiResponse([
      {
        role: "user",
        parts: [{ text: `${systemInstruction}\n\n${userPrompt}` }],
      },
    ]);

    const answer = geminiResponse.trim().toLowerCase();

    if (answer === "react") {
      return res.json({
        prompts: [
          BASE_PROMPT,
          `Here is an artifact that contains all files of the project visible to you.\nConsider the contents of ALL files in the project.\n\n${reactBasePrompt}\n\nHere is a list of files that exist on the file system but are not being shown to you:\n\n  - .gitignore\n  - package-lock.json\n`,
        ],
        uiPrompts: [reactBasePrompt],
      });
    }

    if (answer === "node") {
      return res.json({
        prompts: [
          `Here is an artifact that contains all files of the project visible to you.\nConsider the contents of ALL files in the project.\n\n${nodeBasePrompt}\n\nHere is a list of files that exist on the file system but are not being shown to you:\n\n  - .gitignore\n  - package-lock.json\n`,
        ],
        uiPrompts: [nodeBasePrompt],
      });
    }

    return res.status(403).json({ message: "Unable to determine project type" });
  } catch (error) {
    console.error("❌ /template error:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
});

// ===================
// POST /chat → Generate Code or Chat
// ===================
app.post("/chat", async (req: Request, res: Response) => {
  const messages = req.body.messages;

  if (!messages || !Array.isArray(messages)) {
    return res.status(400).json({ message: "Invalid or missing messages array" });
  }

  try {
    const chatPrompt = messages.map((msg: any) => ({
      role: msg.role,
      parts: [{ text: msg.content }],
    }));

    const geminiResponse = await getGeminiResponse([
      {
        role: "user",
        parts: [{ text: getSystemPrompt() }],
      },
      ...chatPrompt,
    ]);

    return res.json({ response: geminiResponse });
  } catch (error) {
    console.error("❌ /chat error:", error);
    return res.status(500).json({ message: "Gemini chat failed" });
  }
});

// ✅ Add this to start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`✅ Server is running on http://localhost:${PORT}`);
});


// =============
// Start Server
// =============
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`⚡ Gemini API server running at http://localhost:${PORT}`);
});
GEMINI_API_KEY=AIzaSyCJtPCcY678lfLfVlOD5sclgTQ8f6qeyvc
---------------------------------------------------------------------------------------------------

import React, { useEffect, useState } from 'react';
import { useLocation } from 'react-router-dom';
import { StepsList } from '../components/StepsList';
import { FileExplorer } from '../components/FileExplorer';
import { TabView } from '../components/TabView';
import { CodeEditor } from '../components/CodeEditor';
import { PreviewFrame } from '../components/PreviewFrame';
import { Step, FileItem, StepType } from '../types';
import axios from 'axios';
import { BACKEND_URL } from '../config';
import { parseXml } from '../steps';
import { useWebContainer } from '../hooks/useWebContainer';
import { FileNode } from '@webcontainer/api';
import { Loader } from '../components/Loader';
import { motion } from "framer-motion";


const MOCK_FILE_CONTENT = `// This is a sample file content
import React from 'react';

function Component() {
  return <div>Hello World</div>;
}

export default Component;`;

export function Builder() {
  const location = useLocation();
  const { prompt } = location.state as { prompt: string };
  const [userPrompt, setPrompt] = useState("");
  const [llmMessages, setLlmMessages] = useState<{role: "user" | "assistant", content: string;}[]>([]);
  const [loading, setLoading] = useState(false);
  const [templateSet, setTemplateSet] = useState(false);
  const webcontainer = useWebContainer();

  const [currentStep, setCurrentStep] = useState(1);
  const [activeTab, setActiveTab] = useState<'code' | 'preview'>('code');
  const [selectedFile, setSelectedFile] = useState<FileItem | null>(null);
  
  const [steps, setSteps] = useState<Step[]>([]);

  const [files, setFiles] = useState<FileItem[]>([]);

  useEffect(() => {
    let originalFiles = [...files];
    let updateHappened = false;
    steps.filter(({status}) => status === "pending").map(step => {
      updateHappened = true;
      if (step?.type === StepType.CreateFile) {
        let parsedPath = step.path?.split("/") ?? []; // ["src", "components", "App.tsx"]
        let currentFileStructure = [...originalFiles]; // {}
        let finalAnswerRef = currentFileStructure;
  
        let currentFolder = ""
        while(parsedPath.length) {
          currentFolder =  `${currentFolder}/${parsedPath[0]}`;
          let currentFolderName = parsedPath[0];
          parsedPath = parsedPath.slice(1);
  
          if (!parsedPath.length) {
            // final file
            let file = currentFileStructure.find(x => x.path === currentFolder)
            if (!file) {
              currentFileStructure.push({
                name: currentFolderName,
                type: 'file',
                path: currentFolder,
                content: step.code
              })
            } else {
              file.content = step.code;
            }
          } else {
            /// in a folder
            let folder = currentFileStructure.find(x => x.path === currentFolder)
            if (!folder) {
              // create the folder
              currentFileStructure.push({
                name: currentFolderName,
                type: 'folder',
                path: currentFolder,
                children: []
              })
            }
  
            currentFileStructure = currentFileStructure.find(x => x.path === currentFolder)!.children!;
          }
        }
        originalFiles = finalAnswerRef;
      }

    })

    if (updateHappened) {

      setFiles(originalFiles)
      setSteps(steps => steps.map((s: Step) => {
        return {
          ...s,
          status: "completed"
        }
        
      }))
    }
    console.log(files);
  }, [steps, files]);

  useEffect(() => {
    const createMountStructure = (files: FileItem[]): Record<string, any> => {
      const mountStructure: Record<string, any> = {};
  
      const processFile = (file: FileItem, isRootFolder: boolean) => {  
        if (file.type === 'folder') {
          // For folders, create a directory entry
          mountStructure[file.name] = {
            directory: file.children ? 
              Object.fromEntries(
                file.children.map(child => [child.name, processFile(child, false)])
              ) 
              : {}
          };
        } else if (file.type === 'file') {
          if (isRootFolder) {
            mountStructure[file.name] = {
              file: {
                contents: file.content || ''
              }
            };
          } else {
            // For files, create a file entry with contents
            return {
              file: {
                contents: file.content || ''
              }
            };
          }
        }
  
        return mountStructure[file.name];
      };
  
      // Process each top-level file/folder
      files.forEach(file => processFile(file, true));
  
      return mountStructure;
    };
  
    const mountStructure = createMountStructure(files);
  
    // Mount the structure if WebContainer is available
    console.log(mountStructure);
    webcontainer?.mount(mountStructure);
  }, [files, webcontainer]);

  async function init() {
    const response = await axios.post(`${BACKEND_URL}/template`, {
      prompt: prompt.trim()
    });
    setTemplateSet(true);
    
    const {prompts, uiPrompts} = response.data;

    setSteps(parseXml(uiPrompts[0]).map((x: Step) => ({
      ...x,
      status: "pending"
    })));

    setLoading(true);
    const stepsResponse = await axios.post(`${BACKEND_URL}/chat`, {
      messages: [...prompts, prompt].map(content => ({
        role: "user",
        content
      }))
    })

    setLoading(false);

    setSteps(s => [...s, ...parseXml(stepsResponse.data.response).map(x => ({
      ...x,
      status: "pending" as "pending"
    }))]);

    setLlmMessages([...prompts, prompt].map(content => ({
      role: "user",
      content
    })));

    setLlmMessages(x => [...x, {role: "assistant", content: stepsResponse.data.response}])
  }

  useEffect(() => {
    init();
  }, [])

// Ensure framer-motion is installed via: npm install framer-motion

return (
  <motion.div
    className="min-h-screen bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900 text-white flex flex-col font-sans"
    initial={{ opacity: 0 }}
    animate={{ opacity: 1 }}
    transition={{ duration: 0.5 }}
  >
    {/* Header */}
    <header className="bg-gray-800 border-b border-gray-700 px-6 py-4 shadow-md flex flex-col sm:flex-row sm:items-center sm:justify-between">
      <div>
        <h1 className="text-2xl font-extrabold text-purple-900 tracking-tight">
           Website Builder
        </h1>
        <p className="text-sm text-gray-300 mt-1">
          Prompt: <span className="italic text-purple-100">{prompt}</span>
        </p>
      </div>
    </header>

    {/* Main Layout */}
    <div className="flex-1 overflow-hidden">
      <div className="h-full grid grid-cols-4 gap-4 p-4 md:gap-6 md:p-6">

        {/* Sidebar */}
        <motion.div
          className="col-span-1 space-y-6 overflow-auto max-h-[calc(100vh-8rem)] custom-scrollbar"
          initial={{ x: -40, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ duration: 0.6 }}
        >
          {/* Steps Section */}
          <div className="bg-gray-800 rounded-xl p-4 shadow-lg border border-gray-700">
            <h2 className="text-lg font-semibold mb-3 text-gray-100"> Steps</h2>
            <div className="max-h-[80vh] overflow-y-auto pr-2 custom-scrollbar">
              <StepsList steps={steps} currentStep={currentStep} onStepClick={setCurrentStep} />
            </div>
          </div>

          {/* Prompt Input */}
          <div className="bg-gray-800 rounded-xl p-4 shadow-lg border border-gray-700">
            <h2 className="text-lg font-semibold mb-3 text-gray-100"> Custom Prompt</h2>
            {loading || !templateSet ? (
              <div className="flex justify-center items-center h-24">
                <Loader />
              </div>
            ) : (
              <div className="flex flex-col gap-3">
                <textarea
                  value={userPrompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  placeholder="Describe what you want to build..."
                  className="bg-gray-700 text-sm text-white p-3 rounded-md resize-none min-h-[100px] border border-gray-600 focus:outline-none focus:ring-2 focus:ring-purple-500 placeholder:text-gray-400 transition"
                />
                <button
                  onClick={async () => {
                  const newMessage = {
                    role: "user" as const,
                    content: userPrompt,
                  };

                  try {
                    setLoading(true);

                    const stepsResponse = await axios.post(`${BACKEND_URL}/chat`, {
                      messages: [...llmMessages, newMessage],
                    });

                    setLlmMessages((prev) => [...prev, newMessage]);
                    setLlmMessages((prev) => [
                      ...prev,
                      {
                        role: "assistant",
                        content: stepsResponse.data.response,
                      },
                    ]);

                    setSteps((prevSteps) => [
                      ...prevSteps,
                      ...parseXml(stepsResponse.data.response).map((step) => ({
                        ...step,
                        status: "pending" as const,
                      })),
                    ]);
                  } catch (err: any) {
                    console.error("❌ Generation failed:", err);

                    // ✅ Show alert only if it's a quota issue
                    if (err?.response?.status === 429 || err?.message?.includes("quota")) {
                      alert("🛑 Generation failed. You may have hit the API quota. Try again later.");
                    } else {
                      alert("❌ Something went wrong. Please try again.");
                    }
                  } finally {
                    setLoading(false);
                  }
                }}


                  className="bg-gradient-to-tr from-blue-500 to-blue-500 hover:from-blue-400 hover:to-blue-800 text-white font-semibold px-4 py-2 rounded-md transition duration-200 shadow-md hover:shadow-lg"
                >
                   Generate Plan
                </button>
              </div>
            )}
          </div>
        </motion.div>

        {/* File Explorer */}
        <motion.div
          className="col-span-1 bg-gray-800 rounded-xl p-4 shadow-lg overflow-auto max-h-[calc(100vh-8rem)] border border-gray-700 custom-scrollbar"
          initial={{ y: 30, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <h2 className="text-lg font-semibold mb-4 text-gray-100"> File Explorer</h2>
          <FileExplorer files={files} onFileSelect={setSelectedFile} />
        </motion.div>

        {/* Editor / Preview */}
        <motion.div
          className="col-span-2 bg-gray-900 rounded-xl shadow-xl p-4 h-[calc(100vh-8rem)] flex flex-col border border-gray-700"
          initial={{ x: 40, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ duration: 0.6 }}
        >
          <TabView activeTab={activeTab} onTabChange={setActiveTab} />
          <div className="flex-1 overflow-auto mt-4 rounded-md border border-gray-700 bg-gray-800 custom-scrollbar">
            {activeTab === 'code' ? (
              <CodeEditor file={selectedFile} />
            ) : (
              webcontainer ? (
                <PreviewFrame webContainer={webcontainer} files={files} />
              ) : (
                <div className="flex items-center justify-center h-full text-gray-400">
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{
                      repeat: Infinity,
                      duration: 1.5,
                      repeatType: "reverse"
                    }}
                    className="text-purple-300 text-sm"
                  >
                    Loading Preview...
                  </motion.div>
                </div>
              )
            )}
          </div>
        </motion.div>
      </div>
    </div>
  </motion.div>
);



}

--------------------indix file with gemini logic---------------------------
import dotenv from "dotenv";
dotenv.config();

import express, { Request, Response } from "express";
import cors from "cors";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { BASE_PROMPT, getSystemPrompt } from "./prompts";
import { basePrompt as nodeBasePrompt } from "./defaults/node";
import { basePrompt as reactBasePrompt } from "./defaults/react";

// Environment check
if (!process.env.GEMINI_API_KEY) {
  throw new Error("❌ GEMINI_API_KEY is missing in .env");
}

const app = express();
app.use(cors());
app.use(express.json());

// Initialize Gemini model
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY as string);
const model = genAI.getGenerativeModel({ model: "models/gemini-1.5-pro" });

// Function to generate content
async function getGeminiResponse(promptMessages: any[]) {
  try {
    const result = await model.generateContent({
      contents: promptMessages,
      generationConfig: {
        temperature: 1,
        maxOutputTokens: 8000,
      },
    });
    return result.response.text();
  } catch (err) {
    console.error("❌ Gemini generation error:", err);
    throw err;
  }
}

// ==========================
// POST /template → return prompt templates
// ==========================
app.post("/template", async (req: Request, res: Response) => {
  const userPrompt = req.body.prompt;

  if (!userPrompt) {
    return res.status(400).json({ message: "Missing prompt in request body" });
  }

  const systemInstruction =
    "Return either node or react based on what you think this project should be. Only return a single word: either 'node' or 'react'. Do not return anything extra.";

  try {
    const geminiResponse = await getGeminiResponse([
      {
        role: "user",
        parts: [{ text: `${systemInstruction}\n\n${userPrompt}` }],
      },
    ]);

    const answer = geminiResponse.trim().toLowerCase();

    if (answer === "react") {
      return res.json({
        prompts: [
          BASE_PROMPT,
          `Here is an artifact that contains all files of the project visible to you.\nConsider the contents of ALL files in the project.\n\n${reactBasePrompt}\n\nHere is a list of files that exist on the file system but are not being shown to you:\n\n  - .gitignore\n  - package-lock.json\n`,
        ],
        uiPrompts: [reactBasePrompt],
      });
    }

    if (answer === "node") {
      return res.json({
        prompts: [
          `Here is an artifact that contains all files of the project visible to you.\nConsider the contents of ALL files in the project.\n\n${nodeBasePrompt}\n\nHere is a list of files that exist on the file system but are not being shown to you:\n\n  - .gitignore\n  - package-lock.json\n`,
        ],
        uiPrompts: [nodeBasePrompt],
      });
    }

    return res.status(403).json({ message: "Unable to determine project type" });
  } catch (error) {
    console.error("❌ /template error:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
});

// ==========================
// POST /chat → AI response for messages
// ==========================
app.post("/chat", async (req: Request, res: Response) => {
  const messages = req.body.messages;

  if (!messages || !Array.isArray(messages)) {
    return res.status(400).json({ message: "Invalid or missing messages array" });
  }

  try {
    const chatPrompt = messages.map((msg: any) => ({
      role: msg.role,
      parts: [{ text: msg.content }],
    }));

    const geminiResponse = await getGeminiResponse([
      {
        role: "user",
        parts: [{ text: getSystemPrompt() }],
      },
      ...chatPrompt,
    ]);

    return res.json({ response: geminiResponse });
  } catch (error) {
    console.error("❌ /chat error:", error);
    return res.status(500).json({ message: "Gemini chat failed" });
  }
});

// ==========================
// Start Server
// ==========================
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`✅ Server is running on http://localhost:${PORT}`);
});
============================================================================